{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar entropy = require( '@stdlib/stats-base-dists-beta-entropy' );\nvar kurtosis = require( '@stdlib/stats-base-dists-beta-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-beta-mean' );\nvar median = require( '@stdlib/stats-base-dists-beta-median' );\nvar mode = require( '@stdlib/stats-base-dists-beta-mode' );\nvar skewness = require( '@stdlib/stats-base-dists-beta-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-beta-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-beta-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-beta-cdf' );\nvar logcdf = require( '@stdlib/stats-base-dists-beta-logcdf' );\nvar logpdf = require( '@stdlib/stats-base-dists-beta-logpdf' );\nvar mgf = require( '@stdlib/stats-base-dists-beta-mgf' );\nvar pdf = require( '@stdlib/stats-base-dists-beta-pdf' );\nvar quantile = require( '@stdlib/stats-base-dists-beta-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction betaCDF( x ) {\n\treturn cdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction betaLogCDF( x ) {\n\treturn logcdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction betaLogPDF( x ) {\n\treturn logpdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction betaMGF( t ) {\n\treturn mgf( t, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction betaPDF( x ) {\n\treturn pdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction betaQuantile( p ) {\n\treturn quantile( p, this.alpha, this.beta );\n}\n\n\n// MAIN //\n\n/**\n* Beta distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [alpha=1.0] - first shape parameter\n* @param {PositiveNumber} [beta=1.0] - second shape parameter\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @returns {Beta} distribution instance\n*\n* @example\n* var beta = new Beta( 1.0, 1.0 );\n*\n* var y = beta.cdf( 0.8 );\n* // returns 0.8\n*\n* var mu = beta.mean;\n* // returns 0.5\n*/\nfunction Beta() {\n\tvar alpha;\n\tvar beta;\n\tif ( !(this instanceof Beta) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Beta();\n\t\t}\n\t\treturn new Beta( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\tif ( !isPositive( alpha ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First shape parameter must be a positive number. Value: `%s`.', alpha ) );\n\t\t}\n\t\tif ( !isPositive( beta ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second shape parameter must be a positive number. Value: `%s`.', beta ) );\n\t\t}\n\t} else {\n\t\talpha = 1.0;\n\t\tbeta = 1.0;\n\t}\n\tdefineProperty( this, 'alpha', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn alpha;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\talpha = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'beta', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn beta;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tbeta = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Beta distribution differential entropy.\n*\n* @name entropy\n* @memberof Beta.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.entropy;\n* // returns ~-0.869\n*/\nsetReadOnlyAccessor( Beta.prototype, 'entropy', function get() {\n\treturn entropy( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Beta.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.kurtosis;\n* // returns ~0.082\n*/\nsetReadOnlyAccessor( Beta.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution expected value.\n*\n* @name mean\n* @memberof Beta.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.mean;\n* // returns 0.25\n*/\nsetReadOnlyAccessor( Beta.prototype, 'mean', function get() {\n\treturn mean( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution median.\n*\n* @name median\n* @memberof Beta.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.median;\n* // returns ~0.239\n*/\nsetReadOnlyAccessor( Beta.prototype, 'median', function get() {\n\treturn median( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution mode.\n*\n* @name mode\n* @memberof Beta.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.mode;\n* // returns ~0.214\n*/\nsetReadOnlyAccessor( Beta.prototype, 'mode', function get() {\n\treturn mode( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution skewness.\n*\n* @name skewness\n* @memberof Beta.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.skewness;\n* // returns ~0.529\n*/\nsetReadOnlyAccessor( Beta.prototype, 'skewness', function get() {\n\treturn skewness( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution standard deviation.\n*\n* @name stdev\n* @memberof Beta.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.stdev;\n* // returns ~0.105\n*/\nsetReadOnlyAccessor( Beta.prototype, 'stdev', function get() {\n\treturn stdev( this.alpha, this.beta );\n});\n\n/**\n* Beta distribution variance.\n*\n* @name variance\n* @memberof Beta.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var beta = new Beta( 4.0, 12.0 );\n*\n* var v = beta.variance;\n* // returns ~0.011\n*/\nsetReadOnlyAccessor( Beta.prototype, 'variance', function get() {\n\treturn variance( this.alpha, this.beta );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Beta.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var beta = new Beta( 2.0, 4.0 );\n*\n* var v = beta.cdf( 0.5 );\n* // returns ~0.813\n*/\nsetReadOnly( Beta.prototype, 'cdf', betaCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Beta.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var beta = new Beta( 2.0, 4.0 );\n*\n* var v = beta.logcdf( 0.5 );\n* // returns ~-0.208\n*/\nsetReadOnly( Beta.prototype, 'logcdf', betaLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Beta.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var beta = new Beta( 2.0, 4.0 );\n*\n* var v = beta.logpdf( 0.8 );\n* // returns ~-2.0557\n*/\nsetReadOnly( Beta.prototype, 'logpdf', betaLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Beta.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var beta = new Beta( 2.0, 4.0 );\n*\n* var v = beta.mgf( 0.5 );\n* // returns ~1.186\n*/\nsetReadOnly( Beta.prototype, 'mgf', betaMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Beta.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var beta = new Beta( 2.0, 4.0 );\n*\n* var v = beta.pdf( 0.8 );\n* // returns ~0.13\n*/\nsetReadOnly( Beta.prototype, 'pdf', betaPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Beta.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var beta = new Beta( 2.0, 4.0 );\n*\n* var v = beta.quantile( 0.5 );\n* // returns ~0.314\n*/\nsetReadOnly( Beta.prototype, 'quantile', betaQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Beta;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Beta distribution constructor.\n*\n* @module @stdlib/stats-base-dists-beta-ctor\n*\n* @example\n* var Beta = require( '@stdlib/stats-base-dists-beta-ctor' );\n*\n* var beta = new Beta( 1.0, 1.0 );\n*\n* var y = beta.cdf( 0.8 );\n* // returns 0.8\n*\n* var mu = beta.mean;\n* // returns 0.5\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "defineProperty", "setReadOnly", "setReadOnlyAccessor", "isPositive", "entropy", "kurtosis", "mean", "median", "mode", "skewness", "stdev", "variance", "cdf", "logcdf", "logpdf", "mgf", "pdf", "quantile", "format", "betaCDF", "x", "betaLogCDF", "betaLogPDF", "betaMGF", "t", "betaPDF", "betaQuantile", "p", "Beta", "alpha", "beta", "value", "main"]
}
